name: CI

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]

jobs:
  pr-checks:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Update submodules
        run: git submodule update --init --recursive

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: js/package-lock.json

      - name: Install JS dependencies
        working-directory: js
        run: |
          npm install --no-audit --no-fund
          npm install scion-core --no-audit --no-fund

      - name: Typecheck + compile (JS)
        working-directory: js
        run: npm run build

      - name: Lint (JS)
        working-directory: js
        run: npm run lint

      - name: Run JS harness sample (SCION)
        working-directory: js
        run: npm run ci:harness

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: py/requirements.txt

      - name: Install Python dependencies
        working-directory: py
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Python tests
        working-directory: py
        run: python -m pytest

      - name: Ruby engine harness (focused)
        run: bash scripts/ci_ruby_harness.sh
      - name: Ruby engine harness (tests/exec)
        run: |
          bash scripts/ci_ruby_harness.sh tests/exec/*.scxml
      - name: Ruby engine harness (list)
        run: |
          bash scripts/ci_ruby_harness.sh --list scripts/ci_ruby_charts.txt

      - name: Sweep small corpus (Python/SCION reference)
        run: |
          python py/exec_sweep.py tests/sweep_corpus --generate-vectors --workdir uber_out/sweep
      - name: Print sweep coverage totals
        run: |
          python - <<'PY'
          import json, sys
          from pathlib import Path
          p = Path('uber_out/sweep/coverage-summary.json')
          if p.exists():
              data = json.loads(p.read_text())
              t = data.get('totals', {})
              print(f"Sweep coverage totals: entered={t.get('enteredStates',0)} fired={t.get('firedTransitions',0)} done={t.get('doneEvents',0)} error={t.get('errorEvents',0)}")
          else:
              print('No coverage-summary.json found')
          PY

      - name: Upload sweep coverage summary
        uses: actions/upload-artifact@v4
        with:
          name: sweep-coverage-summary-pr
          path: uber_out/sweep/coverage-summary.json
          if-no-files-found: ignore

      - uses: dtolnay/rust-toolchain@stable

      - name: Cargo build (Rust)
        working-directory: rust
        run: cargo build --locked

      - name: Cargo test (Rust)
        working-directory: rust
        run: cargo test --locked

      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2'

      - name: Install Ruby dependencies
        working-directory: ruby
        env:
          BUNDLE_FROZEN: 'false'
        run: |
          bundle config set --local path vendor/bundle
          bundle config set --local frozen false
          bundle install --jobs 4 --retry 3

      - name: Run Ruby specs
        working-directory: ruby
        run: bundle exec rspec

      - name: Build Ruby gem
        working-directory: ruby
        run: |
          rm -f scjson-*.gem
          gem build scjson.gemspec

      - name: Run uber_test for release languages
        working-directory: py
        env:
          BUNDLE_GEMFILE: ${{ github.workspace }}/ruby/Gemfile
          RUBYOPT: -rbundler/setup
        run: |
          python uber_test.py -l python
          python uber_test.py -l javascript
          python uber_test.py -l ruby
          python uber_test.py -l rust

  main-checks:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: write
      id-token: write
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Update submodules
        run: git submodule update --init --recursive

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: 'https://registry.npmjs.org'
          cache: 'npm'
          cache-dependency-path: js/package-lock.json

      - name: Install JS dependencies
        working-directory: js
        run: |
          npm install --no-audit --no-fund
          npm install scion-core --no-audit --no-fund

      - name: Typecheck + compile (JS)
        working-directory: js
        run: npm run build

      - name: Lint (JS)
        working-directory: js
        run: npm run lint

      - name: Run JS harness sample (SCION)
        working-directory: js
        run: npm run ci:harness

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: py/requirements.txt

      - name: Install Python dependencies
        working-directory: py
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Python tests
        working-directory: py
        run: python -m pytest

      - name: Ruby engine harness (focused)
        run: bash scripts/ci_ruby_harness.sh
      - name: Ruby engine harness (tests/exec)
        run: |
          bash scripts/ci_ruby_harness.sh tests/exec/*.scxml
      - name: Ruby engine harness (list)
        run: |
          bash scripts/ci_ruby_harness.sh --list scripts/ci_ruby_charts.txt

      - name: Sweep small corpus (Python/SCION reference)
        run: |
          python py/exec_sweep.py tests/sweep_corpus --generate-vectors --workdir uber_out/sweep
      - name: Print sweep coverage totals
        run: |
          python - <<'PY'
          import json, sys
          from pathlib import Path
          p = Path('uber_out/sweep/coverage-summary.json')
          if p.exists():
              data = json.loads(p.read_text())
              t = data.get('totals', {})
              print(f"Sweep coverage totals: entered={t.get('enteredStates',0)} fired={t.get('firedTransitions',0)} done={t.get('doneEvents',0)} error={t.get('errorEvents',0)}")
          else:
              print('No coverage-summary.json found')
          PY

      - name: Upload sweep coverage summary
        uses: actions/upload-artifact@v4
        with:
          name: sweep-coverage-summary-main
          path: uber_out/sweep/coverage-summary.json
          if-no-files-found: ignore

      - uses: dtolnay/rust-toolchain@stable

      - name: Cargo build (Rust)
        working-directory: rust
        run: cargo build --locked

      - name: Cargo test (Rust)
        working-directory: rust
        run: cargo test --locked

      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2'

      - name: Install Ruby dependencies
        working-directory: ruby
        env:
          BUNDLE_FROZEN: 'false'
        run: |
          bundle config set --local path vendor/bundle
          bundle config set --local frozen false
          bundle install --jobs 4 --retry 3

      - name: Run Ruby specs
        working-directory: ruby
        run: bundle exec rspec

      - name: Build Ruby gem
        working-directory: ruby
        run: |
          rm -f scjson-*.gem
          gem build scjson.gemspec

      - name: Run uber_test for release languages
        working-directory: py
        env:
          BUNDLE_GEMFILE: ${{ github.workspace }}/ruby/Gemfile }
          RUBYOPT: -rbundler/setup
        run: |
          python uber_test.py -l python
          python uber_test.py -l javascript
          python uber_test.py -l ruby
          python uber_test.py -l rust

      - id: determine_pypi
        name: Determine PyPI publish necessity
        working-directory: py
        run: python ../.github/scripts/determine_pypi_publish.py

      - id: determine_crates
        name: Determine crates.io publish necessity
        run: python .github/scripts/determine_crates_publish.py

      - id: determine_rubygems
        name: Determine RubyGems publish necessity
        working-directory: ruby
        run: ruby ../.github/scripts/determine_rubygems_publish.rb

      - name: Publish to PyPI (if version changed)
        if: github.ref == 'refs/heads/main' && steps.determine_pypi.outputs.should_publish == 'true'
        working-directory: py
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_KEY }}
        run: |
          if [ -z "$TWINE_PASSWORD" ]; then
            echo "No PYPI_API_KEY provided; skipping publish."
            exit 0
          fi
          pip install build twine
          rm -rf dist
          python -m build
          twine upload --non-interactive dist/*

      - name: Publish to crates.io (if version changed)
        if: github.ref == 'refs/heads/main' && steps.determine_crates.outputs.should_publish == 'true'
        working-directory: rust
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        run: |
          if [ -z "$CARGO_REGISTRY_TOKEN" ]; then
            echo "No CARGO_REGISTRY_TOKEN provided; skipping crates.io publish."
            exit 0
          fi
          cargo publish --locked --token "$CARGO_REGISTRY_TOKEN"

      - name: Publish to RubyGems (if version changed)
        if: github.ref == 'refs/heads/main' && steps.determine_rubygems.outputs.should_publish == 'true'
        working-directory: ruby
        env:
          RUBYGEMS_API_KEY: ${{ secrets.RUBYGEMS_API_KEY }}
        run: |
          if [ -z "${RUBYGEMS_API_KEY:-}" ]; then
            echo "No RubyGems API key provided; skipping publish." && exit 0
          fi
          mkdir -p ~/.gem
          umask 077
          # Prevent printf from interpreting leading dashes as options
          printf -- '---\n:rubygems_api_key: %s\n' "$RUBYGEMS_API_KEY" > ~/.gem/credentials
          chmod 600 ~/.gem/credentials
          gem push scjson-*.gem

      - id: determine_npm
        name: Determine npm publish necessity
        working-directory: js
        env:
          NPM_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN || secrets.NPM_TOKEN }}
        run: |
          NAME=$(node -p "require('./package.json').name")
          VERSION=$(node -p "require('./package.json').version")
          echo "Package: $NAME@$VERSION"
          EXISTING=$(npm view "$NAME" versions --json || echo "[]")
          echo "Existing versions: $EXISTING"
          SHOULD_PUBLISH=$(node -e "const v=process.argv[1]; let arr=[]; try{arr=JSON.parse(process.argv[2])}catch{}; console.log(!arr.includes(v))" "$VERSION" "$EXISTING")
          echo "should_publish=$SHOULD_PUBLISH" >> "$GITHUB_OUTPUT"

      - name: Publish to npm (if version changed)
        if: github.ref == 'refs/heads/main' && steps.determine_npm.outputs.should_publish == 'true'
        working-directory: js
        env:
          NPM_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN || secrets.NPM_TOKEN }}
        run: |
          TOKEN="${NPM_AUTH_TOKEN:-$NODE_AUTH_TOKEN}"
          if [ -z "$TOKEN" ]; then
            echo "No npm token available; skipping publish."
            exit 0
          fi
          printf '//registry.npmjs.org/:_authToken=%s\n' "$TOKEN" > ~/.npmrc
          npm publish --provenance --access public

      - name: Skip publish (no version change)
        if: steps.determine_npm.outputs.should_publish != 'true'
        run: echo "Package version unchanged; skipping publish."
