name: CI

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]

jobs:
  pr-checks:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: js/package-lock.json

      - name: Install JS dependencies
        working-directory: js
        run: npm install --no-audit --no-fund

      - name: Typecheck + compile (JS)
        working-directory: js
        run: npm run build

      - name: Lint (JS)
        working-directory: js
        run: npm run lint

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: py/requirements.txt

      - name: Install Python dependencies
        working-directory: py
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Python tests
        working-directory: py
        run: python -m pytest

      - name: Install packaging tools (PyPI)
        working-directory: py
        run: pip install build twine

      - name: Build Python package
        working-directory: py
        run: |
          rm -rf dist
          python -m build

      - id: determine_pypi
        name: Determine PyPI publish necessity
        working-directory: py
        run: |
          python <<'PY'
import json
import os
import sys
import tomllib
import urllib.request

with open('pyproject.toml', 'rb') as fh:
    data = tomllib.load(fh)
name = data['project']['name']
version = data['project']['version']

url = f"https://pypi.org/pypi/{name}/json"
try:
    with urllib.request.urlopen(url, timeout=10) as resp:
        payload = json.load(resp)
        existing = set(payload.get('releases', {}).keys())
except Exception:
    existing = set()

should_publish = 'true'  # always attempt publish; errors are tolerated
out = os.environ['GITHUB_OUTPUT']
with open(out, 'a', encoding='utf-8') as fh:
    fh.write(f"name={name}\n")
    fh.write(f"version={version}\n")
    fh.write(f"existing_versions={' '.join(sorted(existing))}\n")
    fh.write(f"should_publish={should_publish}\n")
print(f"PyPI target {name}@{version}; existing versions: {sorted(existing)}")
PY

      - name: Publish to PyPI
        working-directory: py
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_KEY }}
        run: |
          if [ -z "$TWINE_PASSWORD" ]; then
            echo "No PYPI_API_KEY provided; skipping PyPI publish."
            exit 0
          fi
          twine upload --non-interactive dist/* || echo "PyPI publish failed or version already exists; continuing."
        continue-on-error: true

      - id: determine_crates
        name: Determine crates.io publish necessity
        run: |
          python <<'PY'
import json
import os
import tomllib
import urllib.request

with open('rust/Cargo.toml', 'rb') as fh:
    data = tomllib.load(fh)
name = data['package']['name']
version = data['package']['version']

url = f"https://crates.io/api/v1/crates/{name}"
try:
    with urllib.request.urlopen(url, timeout=10) as resp:
        payload = json.load(resp)
        existing = [v.get('num') for v in payload.get('versions', []) if v.get('num')]
except Exception:
    existing = []

should_publish = 'true' if version not in existing else 'false'
out = os.environ['GITHUB_OUTPUT']
with open(out, 'a', encoding='utf-8') as fh:
    fh.write(f"name={name}\n")
    fh.write(f"version={version}\n")
    fh.write(f"should_publish={should_publish}\n")
print(f"Crates target {name}@{version}; existing versions: {existing}")
PY

      - name: Publish to crates.io (if version changed)
        if: steps.determine_crates.outputs.should_publish == 'true'
        working-directory: rust
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        run: |
          if [ -z "$CARGO_REGISTRY_TOKEN" ]; then
            echo "No CARGO_REGISTRY_TOKEN provided; skipping crates.io publish."
            exit 0
          fi
          cargo publish --locked --token "$CARGO_REGISTRY_TOKEN" || echo "Crates publish failed; continuing."
        continue-on-error: true

  main-checks:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: write
      id-token: write
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: 'https://registry.npmjs.org'
          cache: 'npm'
          cache-dependency-path: js/package-lock.json

      - name: Install JS dependencies
        working-directory: js
        run: npm install --no-audit --no-fund

      - name: Typecheck + compile (JS)
        working-directory: js
        run: npm run build

      - name: Lint (JS)
        working-directory: js
        run: npm run lint

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: py/requirements.txt

      - name: Install Python dependencies
        working-directory: py
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Python tests
        working-directory: py
        run: python -m pytest

      - id: determine
        name: Determine publish necessity
        working-directory: js
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN || secrets.NPM_TOKEN }}
        run: |
          NAME=$(node -p "require('./package.json').name")
          VERSION=$(node -p "require('./package.json').version")
          echo "Package: $NAME@$VERSION"
          EXISTING=$(npm view "$NAME" versions --json || echo "[]")
          echo "Existing versions: $EXISTING"
          SHOULD_PUBLISH=$(node -e "const v=process.argv[1]; let arr=[]; try{arr=JSON.parse(process.argv[2])}catch{}; console.log(!arr.includes(v))" "$VERSION" "$EXISTING")
          echo "should_publish=$SHOULD_PUBLISH" >> "$GITHUB_OUTPUT"

      - name: Publish to npm (if version changed)
        if: steps.determine.outputs.should_publish == 'true'
        working-directory: js
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN || secrets.NPM_TOKEN }}
        run: |
          if [ -z "$NODE_AUTH_TOKEN" ]; then
            echo "No npm token available; skipping publish." && exit 0
          fi
          echo "//registry.npmjs.org/:_authToken=${NODE_AUTH_TOKEN}" > ~/.npmrc
          npm publish --provenance --access public || echo "Publish failed; continuing as green per policy."
        continue-on-error: true

      - name: Skip publish (no version change)
        if: steps.determine.outputs.should_publish != 'true'
        run: echo "Package version unchanged; skipping publish."
